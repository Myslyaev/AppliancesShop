@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager navManager

<EditForm Model="loginModel" OnValidSubmit="StartLogin" FormName="Login">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div>
		<p><InputText @bind-Value="loginModel.Mail" type="email"></InputText></p>
		<p><InputText @bind-Value="loginModel.Password" type="password"></InputText></p>
		<p><button type="submit">Войти</button></p>
		<p></p>
		<p><a href="./registration">Зарегистрироваться</a></p>
	</div>
</EditForm>

@code {
	[SupplyParameterFromForm]
	public UserAutenthicationInputModel loginModel { get; set; } = new UserAutenthicationInputModel();

	[CascadingParameter]
	public HttpContext httpContext { get; set; }

	private UserAutenthicationInputModel _user;

	private UserClient _userClient;

	private bool _isAuthenticated = false;

	public Login()
	{
		_userClient = new UserClient();
	}

	public async Task StartLogin()
	{
		loginModel.Mail = loginModel.Mail.ToLower();
		loginModel.Mail = loginModel.Password.ToLower();

		_user = _userClient.GetUserByMail(loginModel.Mail);

		(_isAuthenticated, var pr) = _userClient.GetClaims(_user, loginModel.Password);

		await httpContext.SignInAsync(pr);

		if (_isAuthenticated)
		{
			navManager.NavigateTo("./");
		}

		else
		{
			navManager.NavigateTo("./loginfailed");
		}
	}
}
